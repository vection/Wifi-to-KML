Maiimport java.text.SimpleDateFormat;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import com.csvreader.CsvReader;
import com.csvreader.CsvWriter;
import de.micromata.opengis.kml.v_2_2_0.Document;
import de.micromata.opengis.kml.v_2_2_0.Kml;
import java.util.Date;
;
	
public class Tes2
{	
	public static String convert(String unixSecond) // Convert UNIX to real time.
	{
		long unixSeconds = Long.parseLong(unixSecond);
		Date date = new Date(unixSeconds*1000L); // *1000 is to convert seconds to milliseconds
		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss z"); // the format of your date
		String formattedDate = sdf.format(date);
		System.out.println(formattedDate);
		return formattedDate;
	}
	public static void main(String[] args) 
	{
		ArrayList<Data> elements = new ArrayList<>();
		String[] details = new String[9];
		try {
		     CsvReader products = new CsvReader("C:/Users/Aviv/Desktop/Bdida/wifiscan-export.csv"); // Path to second CSV file.

		     products.readHeaders(); // reading now all details from the csv.
		   
		     while (products.readRecord())
		     {
			      details[0] += " " + products.get("Unix time");
			      details[1] += " " + products.get("BSSID");
			      details[2] += " " + products.get("Signal strength(-dBm)");
			      details[3] += " " + products.get("SSID");
			      details[4] += " " + products.get("Longitude");
			      details[5] += " " + products.get("Latitude");
			      details[6] += " " + products.get("Frequency");
		     }
		       products.close();
		}
		catch (IOException e) 
		{
			e.printStackTrace();
		}
		String[] sp,sp1,sp2,sp3,sp4,sp5;
	 	sp = details[0].split(" ");
	 	sp1 = details[1].split(" ");
	    sp2 = details[2].split(" ");
	    sp3 = details[3].split(" ");
	    sp4 = details[4].split(" ");
	    sp5 = details[5].split(" ");
	    for(int i=1; i<310; i++) // splitting the whole string and writing the details in specific order.
        {
	        		Data p = new Data(sp3[i], sp[i], sp4[i], sp5[i], sp1[i], sp2[i]);
	 			   elements.add(p);
        }
		for(int i=0; i<elements.size(); i++)
			System.out.println(elements.get(i).getSSID());
		
		CreateCSV(elements);
		CreateKML(elements);
		int[] max = sortBy(elements); // Sorting the data
		CreatesortedKML(elements, max); // Create sorted KML file by somthing [number is the column number]
		System.out.println("Created");
		
	}
	public static void CreateCSV(ArrayList<Data> elements) {
		
		String outputFile = "C:/Users/Aviv/Desktop/Bdida/Log.csv"; // Path to output CSV file.
		boolean alreadyExists = new File(outputFile).exists();
		if(!alreadyExists)
		{
		  try 
		  {
			CsvWriter csvOutput = new CsvWriter(new FileWriter(outputFile, true), ',');
			// if the file didn't already exist then we need to write out the header line
			if (!alreadyExists)
			{
							csvOutput.write("Time");
							csvOutput.write("ID");
							csvOutput.write("Lat");
							csvOutput.write("Lon");
							csvOutput.write("Alt");
							csvOutput.write("SSID");
							csvOutput.write("MAC");
							csvOutput.write("Ferquency");
							csvOutput.write("Signal");
							csvOutput.endRecord();
			}	
		    for(int i=1; i<elements.size(); i++) // splitting the whole string and writing the details in specific order.
		    {
		          csvOutput.write(elements.get(i).getTime());
		          csvOutput.write("");
		          csvOutput.write(elements.get(i).getLat());
		          csvOutput.write(elements.get(i).getAlt());
		          csvOutput.write("");
		          csvOutput.write(elements.get(i).getSSID());
		          csvOutput.write(elements.get(i).getMAC());
		          csvOutput.write("");
		          csvOutput.write(elements.get(i).getSignal());
		          csvOutput.endRecord();
		    }
		    
		    csvOutput.close();
		  }
		  catch (IOException e) 
			{
				e.printStackTrace();
			} 
		}
	}
	
	
	private static void CreateKML(ArrayList<Data> elements) { // Create KML file with the details required.
		final Kml kml = new Kml();
		Document document = kml.createAndSetDocument();
		for(int i=1; i<elements.size(); i++)
		{
		  document.createAndAddPlacemark()
		   .withName(elements.get(i).getSSID())
		   .withDescription("Wifi: "+elements.get(i).getSSID()+"\n Signal: "+elements.get(i).getSignal()+"\n Longtitude: "+elements.get(i).getLat()+"\n Attitude: "+elements.get(i).getAlt()+"\n MAC:"+elements.get(i).getMAC())
		   .createAndSetPoint().addToCoordinates(Double.parseDouble(elements.get(i).getLat()), Double.parseDouble(elements.get(i).getAlt()));
		}
		try {
			kml.marshal(new File("Placements2.kml"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private static int[] sortBy(ArrayList<Data> elements)
	{
		int[] max = new int[10];
		int[] sorted = new int[elements.size()];
		for(int i=1; i<elements.size(); i++)
		{
			sorted[i] = Integer.parseInt(elements.get(i).getSignal());
		}
		Arrays.sort(sorted);
		int j=0;
		for(int i =sorted.length-2; i>sorted.length-12; i--)
		{
			max[j] = sorted[i];
			j++;
		}
		return max;
	}
	
	private static void CreatesortedKML(ArrayList<Data> elements, int[] max) {
		int count=0;
		final Kml kml = new Kml();
		Document document = kml.createAndSetDocument();
		int i=1;
		while(count < 9) // taking the 10 most higest values by column number.
		{
			if(Integer.parseInt(elements.get(i).getSignal()) == max[count])
			{
				 document.createAndAddPlacemark()
				   .withName(elements.get(i).getSSID())
				   .withDescription("Wifi: "+elements.get(i).getSSID()+"\n Signal: "+elements.get(i).getSignal()+"\n Longtitude: "+elements.get(i).getLat()+"\n Attitude: "+elements.get(i).getAlt()+"\n MAC:"+elements.get(i).getMAC())
				   .createAndSetPoint().addToCoordinates(Double.parseDouble(elements.get(i).getLat()), Double.parseDouble(elements.get(i).getAlt()));
		      count++;
		      i=1;
			}
			i++;
		}
		try {
			kml.marshal(new File("Sorted2.kml"));
			System.out.println("Created");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	} 
}
